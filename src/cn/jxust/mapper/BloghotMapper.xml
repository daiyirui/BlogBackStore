<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="BankMapper">

  <resultMap type="com.kingdee.entity.BankCard" id="bankCardList">
    <result property="id" column="id"/>
    <result property="bankCardNo" column="bank_card_no"/>
    <result property="accountName" column="account_name"/>
    <result property="type" column="type"/>
    <result property="loginName" column="login_name"/>
    <result property="signupDate" column="signup_date"/>
    <result property="currency" column="currency"/>
    <result property="balance" column="balance"/>
    <result property="parentBankCardNo" column="parent_bank_card_no"/>
    <result property="bankType" column="bank_type"/>
    <result property="cardType" column="card_type"/>
    <result property="updateTime" column="update_time"/>
    <result property="rid" column="rid"/>
    <result property="houseHolder" column="house_holder"/>
  </resultMap>
  <resultMap type="com.kingdee.entity.Record" id="recordList">
    <result column="bank_card_no" property="bankCardNo"/>
    <result column="balance" property="balance"/>
    <result column="target_bank_card_no" property="targetbankCardNo"/>
    <result column="target_account_name" property="targetAccountName"/>
    <result column="currency" property="currency"/>
    <result column="summary" property="summary"/>
    <result column="postscript" property="postscript"/>
    <result column="time" property="time"/>
    <result column="income" property="income"/>
    <result column="outcome" property="outcome"/>
    <result column="outcome" property="outcome"/>
    <result column="settled_bill_info_id" property="settledBillInfoId"/>
    <result column="serial_num" property="serialNum"/>
    <result column="post_date" property="postDate"/>
  </resultMap>
  <resultMap type="com.kingdee.web.entity.BankState" id="bankStateList">
    <result column="bankCode" property="bankCode"/>
    <result column="dailyBill" property="dailyBill"/>
    <result column="monthBill" property="monthBill"/>
    <result column="loginVersion" property="loginVersion"/>
    <result column="autoValid" property="autoValid"/>
    <result column="savingsCard" property="savingsCard"/>
    <result column="savingAutoValid" property="savingAutoValid"/>
    <result column="savingLoginVersion" property="savingLoginVersion"/>
    <result column="isDisplay" property="isDisplay"/>
  </resultMap>
  <resultMap type="com.kingdee.web.entity.BankState2" id="bankStateList2">
    <result column="bank_type" property="bankType"/>
    <result column="product_name" property="productName"/>
    <result column="bank_code" property="bankCode"/>
    <result column="entry" property="entry"/>
    <result column="daily_bill" property="dailyBill"/>
    <result column="month_bill" property="monthBill"/>
    <result column="login_version" property="loginVersion"/>
    <result column="auto_valid" property="autoValid"/>
    <result column="savings_card" property="savingsCard"/>
    <result column="is_display" property="isDisplay"/>
    <result column="tips" property="tips"/>
  </resultMap>
  <resultMap type="com.kingdee.entity.UserAccount" id="userAccount">
    <result column="login_name" property="loginName"/>
    <result column="bank_type" property="bankType"/>
    <result column="idcard_no" property="idCardNo"/>
    <result column="create_time" property="createTime"/>
    <result column="update_time" property="updateTime"/>
    <result column="record_num" property="recordNum"/>
    <result column="terminalType" property="terminalType"/>
    <result column="terminalVersion" property="terminalVersion"/>
    <result column="login_state" property="loginState"/>
    <result column="pwd_md5" property="pwdMd5"/>
    <result column="first_succ_time" property="firstSuccTime"/>
  </resultMap>
  <resultMap type="com.kingdee.entity.BankAvailableState" id="bankAvailableState">
    <result column="productName" property="product_name"/>
    <result column="productVersion" property="product_version"/>
    <result column="bankCode" property="bank_code"/>
    <result column="entry" property="entry"/>
    <result column="state" property="state"/>
    <result column="tip" property="tip"/>
  </resultMap>
  <resultMap type="com.kingdee.entity.GoodsAddress" id="goodsAddressList">
    <result property="id" column="id"/>
    <result property="rid" column="rid"/>
    <result property="addressType" column="address_type"/>
    <result property="consignee" column="consignee"/>
    <result property="address" column="address"/>
    <result property="region" column="region"/>
    <result property="zipCode" column="zip_code"/>
    <result property="mobilePhone" column="mobile_phone"/>
    <result property="telephone" column="telephone"/>
    <result property="mailBox" column="mail_box"/>
    <result property="updateTime" column="update_time"/>
    <result property="createTime" column="create_time"/>
  </resultMap>

  <select id="getSpecialBankAccountAmout" resultType="Integer">
    select count(*) from special_account where bank_type=#{bankType}
  </select>

  <!-- insert id="saveSpecialBankAccount">
    insert into special_account(bank_type,login_name,create_time,logon,type)
    values(#{bankAccount.bankType},#{bankAccount.loginName},NOW(),#{bankAccount.logon},#{type})
  </insert -->

  <select id="getSpecialBankAccountId" resultType="Integer">
    select id from special_account WHERE login_name=#{bankAccount.loginName} AND bank_type=#{bankAccount.bankType} limit 1
  </select>

  <insert id="addBankAccount">
    insert into bank_account(login_name,bank_type,idcard_no,create_time,terminalType,terminalVersion,update_time,login_state,pwd_md5,first_succ_time)
    values(#{bankAccount.loginName},#{bankAccount.bankType},#{bankAccount.idCardNo},NOW(),#{bankAccount.terminalType},#{bankAccount.productVersion}
    ,NOW(),#{loginState},#{bankAccount.pwdMd5},#{firstSuccTime})
  </insert>

  <!-- 只有前面是登录失败的时候在更新 -->
  <insert id="updateBankAccountLoginState">
    update bank_account set login_state = #{loginState}, update_time = NOW()
    <if test="pwdMd5 != null">
      ,pwd_md5=#{pwdMd5}
    </if>
    <if test="firstSuccTime != null">
      ,first_succ_time = #{firstSuccTime}
    </if>
    WHERE login_name = #{bankAccount.loginName} AND bank_type = #{bankAccount.bankType}
  </insert>

  <select id="getUserAccount" resultMap="userAccount">
    select * from bank_account WHERE login_name=#{bankAccount.loginName} AND bank_type=#{bankAccount.bankType} limit 1
  </select>

  <!-- 只有在初始状态才更新，记录第一次导入的记录数目 -->
  <update id="updateBankAccount">
    update bank_account set record_num = #{recNum} WHERE login_name = #{bankAccount.loginName} AND bank_type = #{bankAccount.bankType} AND record_num = 0
  </update>

  <select id="getBankCardId" resultType="Integer">
    SELECT id FROM bank_card
    <where>
      <if test="bankCard.rid != 0">
        and rid=#{bankCard.rid}
        AND currency=#{bankCard.currency}
      </if>
      <if test="bankCard.rid == 0">
        and login_name=#{bankCard.loginName}
        and bank_type=#{bankCard.bankType}
        and bank_card_no=#{bankCard.bankCardNo}
        and parent_bank_card_no is null
      </if>
    </where>
    limit 1
  </select>

  <select id="queryBankCard" resultMap="bankCardList">
    select * from bank_card where login_name=#{loginName} and bank_type=#{bankType} order by id
  </select>

  <select id="queryBankCardByRid" resultMap="bankCardList">
    select * from bank_card where rid=#{rid}
  </select>

  <select id="queryBankCardByCardNo" resultMap="bankCardList">
    SELECT * FROM bank_card WHERE bank_card_no=#{bankCardNo} AND rid=0 AND house_holder=#{houseHolder} LIMIT 1
  </select>

  <select id="queryBankCardByLastCardNo" resultMap="bankCardList">
    SELECT * FROM bank_card WHERE login_name=#{loginName} AND bank_type=#{bankType} AND rid=0 AND bank_card_no like #{lastBankCardNo}  LIMIT 1
  </select>

  <insert id="addBankCard" useGeneratedKeys="true" keyProperty="bankCard.id">
    insert ignore into
      bank_card(
        bank_card_no,
        account_name,
        currency,
        signup_date,
        type,balance,
        login_name,
        parent_bank_card_no,
        bank_type,
        card_type,
        rid,
        update_time,
        house_holder,
        bill_day,
        create_time)
    values(
      #{bankCard.bankCardNo},
      #{bankCard.accountName},
      #{bankCard.currency},
      #{bankCard.signupDate},
      #{bankCard.type},
      #{bankCard.balance},
      #{bankCard.loginName},
      #{bankCard.parentBankCardNo},
      #{bankCard.bankType},
      #{bankCard.cardType},
      #{bankCard.rid},
      NOW(),
      #{bankCard.houseHolder},
      #{bankCard.billDay},
      NOW())
  </insert>

  <insert id="addIrregularBankCard" useGeneratedKeys="true" keyProperty="bankCard.id">
    insert into
      bank_irregular_card(bank_card_no,account_name,currency,signup_date,type,balance,login_name,parent_bank_card_no,bank_type,card_type,rid,irregular_key)
    values(#{bankCard.bankCardNo},#{bankCard.accountName},#{bankCard.currency},#{bankCard.signupDate},#{bankCard.type},#{bankCard.balance},#{bankCard.loginName},#{bankCard.parentBankCardNo},#{bankCard.bankType},#{bankCard.cardType},#{bankCard.rid},#{bankCard.irregularKey})
  </insert>

  <update id="updateBankCardById">
    update
      bank_card
    set
      balance=#{balance}, bank_card_no=#{bankCardNo}, parent_bank_card_no=#{parentBankCardNo}, update_time=now()
    where
      id = #{id}
  </update>

  <update id="updateBankCard">
	update
	bank_card
	set
	login_name=#{bankCard.loginName}
	<if test="bankCard.houseHolder != null">
          <![CDATA[,house_holder=#{bankCard.houseHolder}]]>
	</if>
	<if test="bankCard.billDay != null">
          <![CDATA[,bill_day=#{bankCard.billDay}]]>
	</if>
      ,account_name=#{bankCard.accountName}
      ,update_time=NOW()
    where
      login_name=#{bankCard.loginName}
      and bank_type=#{bankCard.bankType}
      and bank_card_no=#{bankCard.bankCardNo}
  </update>

  <update id="updateChildBankCard">
	update
	bank_card
	set
	balance=#{bankCard.balance}
	<if test="bankCard.houseHolder != null">
          <![CDATA[,house_holder=#{bankCard.houseHolder}]]>
	</if>
	<if test="bankCard.billDay != null">
          <![CDATA[,bill_day=#{bankCard.billDay}]]>
	</if>
      ,update_time=NOW()
    where
      rid=#{bankCard.rid}
    <if test="bankCard.bankCardNo != null">
      and bank_card_no=#{bankCard.bankCardNo}
    </if>
  </update>

    <select id="queryCashFlow" resultMap="recordList">
      select * from bank_record
      <where>
      <foreach open="(" collection="bankcards" item="bankcard" separator="or" close=")">
        rid=#{bankcard.id}
      </foreach>
      <if test="begin != null">
        <![CDATA[and time>=#{begin}]]>
      </if>
      <if test="end != null">
        <![CDATA[and time<#{end}]]>
      </if>
        <![CDATA[and enabled=1]]>
      </where>
      order by time,rid desc
    </select>

    <select id="queryUnsettledCashFlow" resultMap="recordList">
      select * from credit_unsettled_record
      <where>
      <foreach open="(" collection="bankcards" item="bankcard" separator="or" close=")">
        rid=#{bankcard.id}
      </foreach>
      <if test="begin != null">
        <![CDATA[and time>=#{begin}]]>
      </if>
      <if test="end != null">
        <![CDATA[and time<#{end}]]>
      </if>
      </where>
      order by time,rid desc
    </select>

  <select id="queryCashFlow2" resultMap="recordList">
    select * from bank_record
    <where>
      rid=#{rid}
      <if test="begin!=null">
          <![CDATA[and time>=#{begin}]]>
      </if>
        <![CDATA[and enabled=1]]>
    </where>
    order by time desc
  </select>
  <select id="queryCashFlow3" resultMap="recordList">
    select * from bank_record
    <where>
      rid=#{rid}
      and month=#{month}

        <![CDATA[and enabled=1]]>
    </where>
    order by time desc
  </select>

   <select id="hasRecordByBankCards" resultType="java.lang.Integer">
       SELECT bank_type FROM bank_record
       <where>
        <foreach open="(" collection="bankCardList" item="bankCard" separator="or" close=")">
          rid=#{bankCard.id}
        </foreach>
      </where>
       LIMIT 1;
    </select>

   <select id="getLastRecord" resultMap="recordList">
       select * from bank_record where rid = #{bankCard.id} order by time desc, id desc limit 1
    </select>

    <select id="getLastDateRecords" resultMap="recordList">
       select * from bank_record where rid = #{bankCard.id} and time = (SELECT max(time) from bank_record where rid = #{bankCard.id})
    </select>

	<select id="getLastDateRecordsByBankCardNo" resultMap="recordList">
		select c.* from (select a.* from bank_card b join bank_record a on b.login_name = #{loginName} and b.bank_card_no like concat(#{cardNo},'%') 
		and a.rid = b.id) as c join (select max(time) as mtime from bank_card b join bank_record a on b.login_name=#{loginName} and b.bank_card_no 
		like concat(#{cardNo}, '%') and a.rid=b.id) as d where time=mtime
	</select>
    

    <insert id="addRecords">
      insert into bank_record(bank_card_no,balance,currency,summary,postscript,time,income,outcome,bank_type,rid,insert_time,month,post_date,settled_bill_info_id,serial_num)
      values
      <foreach collection="records" item="record" separator=",">
      (#{record.bankCardNo},#{record.balance},#{record.currency},#{record.summary},#{record.postscript},#{record.time},#{record.income},#{record.outcome},#{record.bankType},#{record.rid},NOW(),#{record.month},#{record.postDate},#{record.settledBillInfoId},#{record.serialNum})
      </foreach>
    </insert>

    <delete id="deleteUnsettledRecords">
      delete from credit_unsettled_record where rid = #{rid};
    </delete>

  <insert id="addUnsettledRecords">
    insert into credit_unsettled_record(bank_card_no,balance,currency,summary,postscript,time,income,outcome,bank_type,rid,insert_time,post_date)
      values
      <foreach collection="records" item="record" separator=",">
      (#{record.bankCardNo},#{record.balance},#{record.currency},#{record.summary},#{record.postscript},#{record.time},#{record.income},#{record.outcome},#{record.bankType},#{record.rid},NOW(),#{record.postDate})
      </foreach>
  </insert>

    <update id="updateSettledBillInfo">
      update settled_bill_info set
        credit_limit=#{settledBillInfo.creditLimit},
        limit_avail=#{settledBillInfo.limitAvail},
        payment_due_date=#{settledBillInfo.paymentDueDate},
        new_balance=#{settledBillInfo.newBalance},
        min_payment=#{settledBillInfo.minPayment},
        new_charges=#{settledBillInfo.newCharges},
        balanceBF=#{settledBillInfo.balanceBF},
        bill_date=#{settledBillInfo.billDate},
        statement_cycle_begin_date=#{settledBillInfo.statementCycleBeginDate},
        statement_cycle_end_date=#{settledBillInfo.statementCycleEndDate},
        adjustment=#{settledBillInfo.adjustment},
        cash_credit_limit=#{settledBillInfo.cashCreditLimit},
        can_cash_credit_limit=#{settledBillInfo.canCashCreditLimit},
        new_surplus_payment=#{settledBillInfo.newSurplusPayment},
        new_surplus_min_payment=#{settledBillInfo.newSurplusMinPayment},
        payment_balance=#{settledBillInfo.paymentBalance}
        where rid=#{settledBillInfo.rid} and month=#{settledBillInfo.month}
    </update>

     <update id="updateUnSettledBillInfo">
      update settled_bill_info set
        new_surplus_payment=#{settledBillInfo.newSurplusPayment},
        new_surplus_min_payment=#{settledBillInfo.newSurplusMinPayment},
        create_time=NOW()
        where rid=#{settledBillInfo.rid} and month=#{settledBillInfo.month}
    </update>

    <insert id="saveSettledBillInfo" useGeneratedKeys="true" keyProperty="settledBillInfo.id">
      insert into settled_bill_info(
        credit_limit,
        limit_avail,
        payment_due_date,
        new_balance,
        min_payment,
        new_charges,
        balanceBF,
        bill_date,
        statement_cycle_begin_date,
        statement_cycle_end_date,
        month,
        adjustment,
        cash_credit_limit,
        can_cash_credit_limit,
        payment_balance,
        rid,
        new_surplus_payment,
        new_surplus_min_payment,
        create_time)
      values(
        #{settledBillInfo.creditLimit},
        #{settledBillInfo.limitAvail},
        #{settledBillInfo.paymentDueDate},
        #{settledBillInfo.newBalance},
        #{settledBillInfo.minPayment},
        #{settledBillInfo.newCharges},
        #{settledBillInfo.balanceBF},
        #{settledBillInfo.billDate},
        #{settledBillInfo.statementCycleBeginDate},
        #{settledBillInfo.statementCycleEndDate},
        #{settledBillInfo.month},
        #{settledBillInfo.adjustment},
        #{settledBillInfo.cashCreditLimit},
        #{settledBillInfo.canCashCreditLimit},
        #{settledBillInfo.paymentBalance},
        #{settledBillInfo.rid},
        #{settledBillInfo.newSurplusPayment},
        #{settledBillInfo.newSurplusMinPayment},
        NOW()
        )
    </insert>

    <update id="disabledRecord">
      update bank_record set enabled=0 where rid=#{lastRecord.rid} and datediff(time,#{lastRecord.time})=0 and enabled=1
    </update>

    <select id="getCreditLimit" resultType="String">
      select credit_limit from settled_bill_info where rid=#{cid} order by statement_cycle_begin_date desc limit 1
    </select>

    <select id="getLastMonth" resultType="String">
      select month from settled_bill_info where rid=#{cid} order by statement_cycle_begin_date desc limit 1
    </select>

    <select id="getLastMonthByLoginName" resultType="String">
      SELECT MAX(month) as month FROM bank_card a join settled_bill_info b on
      a.login_name = #{loginName} and a.bank_type=#{bankType} and b.rid=a.id;
    </select>
    <select id="getLastMonthByParentCardNo" resultType="String">
      SELECT MAX(month) as month FROM bank_card a join settled_bill_info b on
      a.login_name = #{loginName} and a.bank_type=#{bankType} AND a.parent_bank_card_no=#{parentCardNo} and b.rid=a.id;
    </select>
     <select id="getLastMonthByCardNo" resultType="String">
      SELECT MAX(month) as month FROM bank_card a join settled_bill_info b on
      a.login_name = #{loginName} and a.bank_type=#{bankType} AND a.bank_card_no=#{cardNo} and b.rid=a.id;
    </select>

    <select id="getLastDepositTimeByLoginName" resultType="java.util.Date">
      SELECT MAX(b.time) as lastTime FROM bank_card a join bank_record b on
      a.login_name = #{loginName} and a.bank_type=#{bankType} and a.type=0
      and b.rid=a.id and b.enabled=1;
    </select>

     <select id="getLastDepositTimeByCardNo" resultType="java.util.Date">
      SELECT MAX(b.time)  FROM bank_card a JOIN bank_record b on
      a.login_name=#{loginName} AND a.bank_type=#{bankType} AND a.type=0 AND a.parent_bank_card_no=#{cardNo}
      and b.rid=a.id AND b.enabled=1 AND a.rid>0
    </select>

  <!-- select id="sizeSettledBillInfoWithMonth" resultType="java.lang.Integer">
    select count(*) from bank_card a inner join settled_bill_info b on
    a.login_name = #{loginName} and a.bank_type = #{bankType}
    <if test="card!=null">
      and a.bank_card_no like concat(#{card}, '%')
    </if>
    and b.rid = a.id where b.month = #{month}
  </select -->

  <update id="removeDeprecateRecords">
    delete from bank_record where rid=#{rid} and month=#{month}
  </update>

  <update id="removeSettledBillInfo">
    delete from settled_bill_info where rid=#{rid} and month=#{month}
  </update>

  <!-- select id="getSettledBillInfoMonths" resultType="java.lang.String">
    select s.month from bank_card c,settled_bill_info s where c.id=s.rid and c.bank_card_no=#{card} and c.login_name=#{loginName} and c.bank_type=#{bankType}
  </select -->

    <select id="bankState" resultMap="bankStateList">
      select * from bank_func_state where productName = #{productName} ORDER BY `order`
    </select>

     <select id="bankState2" resultMap="bankStateList2">
      select * from bank_func_state_entry where product_name = #{productName} ORDER BY `order`,bank_type
    </select>

    <resultMap type="com.kingdee.entity.BankProxy" id="bankProxy">
      <result column="is_proxy" property="isProxy"/>
      <result column="fixed_proxy" property="fixedProxy"/>
    </resultMap>

    <!-- select id="getBankProxy" resultMap="bankProxy">
      select is_proxy,fixed_proxy from bank_proxy where bankType = #{bankType} limit 1
    </select -->

    <!-- ================================================================== -->
    <insert id="addBankDisabledRecord">
        insert into bank_disabled_records(bank_code, card_type, login_name,udid,token,product_name,create_time)
        values(#{record.bankCode},#{record.cardType},#{record.loginName},#{record.udid},#{record.token},#{record.productName},#{record.createTime})
    </insert>
    <select id="getBankAvailableState" resultMap="bankAvailableState">
       select * from bank_available_state where product_name=#{productName} and bank_code=#{bankCode} and entry=#{entry} limit 1
    </select>
	<select id="listBankAvailableState" resultMap="bankAvailableState">
       select * from bank_available_state where state = 0
    </select>
    
    
     <insert id="addBankUser" useGeneratedKeys="true" keyProperty="bankUser.id">
    insert ignore into
      bank_user(
        login_name,
        bank_type,
        user_name,
        sex,
        phone,
        email,
        qq,
        idcard_no,
        birthday,
        education,
        work,
        industry,
        marriage,
        home_address,
        home_phone,
        home_zip_code,
        company_name,
        company_address,
        company_phone,
        company_zip_code,
        bill_mode,
        home_register_address,
        user_level,
        update_time,
        create_time
        )
    values(
      #{bankUser.loginName},
      #{bankUser.bankType},
      #{bankUser.userName},
      #{bankUser.sex},
      #{bankUser.phone},
      #{bankUser.email},
      #{bankUser.qq},
      #{bankUser.idcardNo},
      #{bankUser.birthday},
      #{bankUser.education},
      #{bankUser.work},
      #{bankUser.industry},
      #{bankUser.marriage},
      #{bankUser.homeAddress},
      #{bankUser.homePhone},
      #{bankUser.homeZipCode},
      #{bankUser.companyName},
      #{bankUser.companyAddress},
      #{bankUser.companyPhone},
      #{bankUser.companyZipCode},
      #{bankUser.billMode},
      #{bankUser.homeRegisterAddress},
      #{bankUser.userLevel},  
      NOW(),
      NOW())
  </insert>
  
      <update id="updateBankUser">
    update
      bank_user
    set
      login_name=#{bankUser.loginName}
      <if test="bankUser.userName != null">
          <![CDATA[,user_name=#{bankUser.userName}]]>
        </if>
       <if test="bankUser.sex != null">
          <![CDATA[,sex=#{bankUser.sex}]]>
        </if>
        <if test="bankUser.phone != null">
          <![CDATA[,phone=#{bankUser.phone}]]>
        </if>
         <if test="bankUser.email != null">
          <![CDATA[,email=#{bankUser.email}]]>
        </if>
          <if test="bankUser.qq != null">
          <![CDATA[,qq=#{bankUser.qq}]]>
        </if>
          <if test="bankUser.idcardNo != null">
          <![CDATA[,idcard_no=#{bankUser.idcardNo}]]>
        </if>
           <if test="bankUser.birthday != null">
          <![CDATA[,birthday=#{bankUser.birthday}]]>
        </if>
           <if test="bankUser.work != null">
          <![CDATA[,work=#{bankUser.work}]]>
        </if>
           <if test="bankUser.industry != null">
          <![CDATA[,industry=#{bankUser.industry}]]>
        </if>
         <if test="bankUser.marriage != null">
          <![CDATA[,marriage=#{bankUser.marriage}]]>
        </if>
        <if test="bankUser.homeAddress != null">
          <![CDATA[,home_address=#{bankUser.homeAddress}]]>
        </if>
           <if test="bankUser.homePhone != null">
          <![CDATA[,home_phone=#{bankUser.homePhone}]]>
        </if>
           <if test="bankUser.homeZipCode != null">
          <![CDATA[,home_zip_code=#{bankUser.homeZipCode}]]>
        </if>
         <if test="bankUser.companyName != null">
          <![CDATA[,company_name=#{bankUser.companyName}]]>
        </if>
          <if test="bankUser.companyAddress != null">
          <![CDATA[,company_address=#{bankUser.companyAddress}]]>
        </if>
         <if test="bankUser.companyPhone != null">
          <![CDATA[,company_phone=#{bankUser.companyPhone}]]>
        </if>
        <if test="bankUser.companyZipCode != null">
          <![CDATA[,company_zip_code=#{bankUser.companyZipCode}]]>
        </if>
          <if test="bankUser.billMode != null">
          <![CDATA[,bill_mode=#{bankUser.billMode}]]>
        </if>
         <if test="bankUser.homeRegisterAddress != null">
          <![CDATA[,home_register_address=#{bankUser.homeRegisterAddress}]]>
        </if>
          <if test="bankUser.userLevel != null">
          <![CDATA[,user_level=#{bankUser.userLevel}]]>
        </if>
      ,update_time=NOW()
    where
      login_name=#{bankUser.loginName}
      and bank_type=#{bankUser.bankType}
  </update>
    <insert id="addBankIntegrals">
      insert into bank_integral(current_Balance,validity_Date,month,rid,create_time)
      values
      <foreach collection="BankIntegrals" item="bankIntegral" separator=",">
      (#{bankIntegral.currentBalance},#{bankIntegral.validityDate},#{bankIntegral.month},#{bankIntegral.rid},NOW())
      </foreach>
    </insert>

	<insert id="addGoodsAddress" useGeneratedKeys="true"
		keyProperty="bankUser.id">
		insert ignore into
		goods_address(
		consignee,
		mobile_phone,
		mail_box,
		rid,
		telephone,
		zip_code,
		region,
		address,
		address_type,
		remarks,
		update_time,
		create_time
		)
		values(
		#{goodsAddress.consignee},
		#{goodsAddress.mobilePhone},
		#{goodsAddress.mailBox},
		#{goodsAddress.rid},
		#{goodsAddress.telephone},
		#{goodsAddress.zipCode},
		#{goodsAddress.region},
		#{goodsAddress.address},
		#{goodsAddress.addressType},
		#{goodsAddress.remarks},
		NOW(),
		NOW())
</insert>

  <select id="checkGoodsAddress" resultType="Integer">
		select count(1) from goods_address where rid=#{goodsAddress.rid} and consignee=#{goodsAddress.consignee} and telephone=#{goodsAddress.telephone} 
		and region=#{goodsAddress.region} and address=#{goodsAddress.address} and address_type=#{goodsAddress.addressType}
  </select>
    <select id="queryGoodsAddress" resultMap="goodsAddressList">
    select * from goods_Address where rid=#{rid} order by id
  </select>

</mapper>
